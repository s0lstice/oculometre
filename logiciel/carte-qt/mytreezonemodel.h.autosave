/**
 * \file mytreezonemodel.h
 * \brief Model definissant l'affichage des zones dans un QtreeView.
 * \author Mickael Puret
 *
 */
#ifndef MYTREEZONEMODEL_H
#define MYTREEZONEMODEL_H

#include <QAbstractItemModel>
#include <QModelIndex>

class Groupe_selection;
class MainWindow;
class Selection;
class Rectangle;
class Cercle;

/*!
  @class class MyTreeZoneModel : public QAbstractItemModel
  @brief Definition d'un model pour afficher une structure composite pattern dans un QTreeView.
  */
class MyTreeZoneModel : public QAbstractItemModel
{
    Q_OBJECT
public:
    /*!
      @fn explicit MyTreeZoneModel(QObject *parent = 0);
      @brief Constructeur du Model
      */
    explicit MyTreeZoneModel(QObject *parent = 0);

    /*!
      @fn ~MyTreeZoneModel();
      @brief Destructeur du model.
      */
    ~MyTreeZoneModel();

    /*!
      @fn void setRootNode(Groupe_selection *node);
      @param Groupe_selection *node : pointeur sur la recine de l'arbre a afficher.
      @brief definit la racine de l'arbre a afficher
      */
    void setRootNode(Groupe_selection *node);

    /*!
      @fn Groupe_selection *addGroup(QModelIndex item);
      @param QModelIndex item : designe l'item selectionné.
      @return Groupe_selection * : La nouvelle zone.
      @brief Ajoute un groupe (Objet de type Groupe_selection) dans l'arbre à la position sélectionné, et réactualise l'affichage du model.
      */
    Groupe_selection *addGroup(QModelIndex item);

    /*!
      @fn Selection *addSelection(QModelIndex item);
      @param QModelIndex item : designe l'item selectionné.
      @return Selection * : La nouvelle zone.
      @brief Ajoute une sélection (Objet de type Selection) dans l'arbre à la position sélectionné, et réactualise l'affichage du model.
      */
    Selection *addSelection(QModelIndex item);

    /*!
      @fn Rectangle * addRect(QModelIndex item);
      @param QModelIndex item : designe l'item selectionné.
      @return Rectangle * : La nouvelle zone.
      @brief Ajoute un rectangle (Objet de type Rectangle) dans l'arbre à la position sélectionné, et réactualise l'affichage du model.
      */
    Rectangle * addRect(QModelIndex item);

    /*!
      @fn Cercle * addCercle(QModelIndex item);
      @param QModelIndex item : designe l'item selectionné.
      @return Cercle * : La nouvelle zone.
      @brief Ajoute un cercle (Objet de type Cercle) dans l'arbre à la position sélectionné, et réactualise l'affichage du model.
      */
    Cercle * addCercle(QModelIndex item);

    /*!
      @fn Groupe_selection *nodeFromIndex(const QModelIndex &index) const;
      @param const QModelIndex &index : designe l'item selectionné.
      @return Groupe_selection * : Zone de type composite.
      @brief Convertie un QModelIndex (referance une position de l'arblre dans le model) en un pointeur vers un objet de type Groupe_selection.
      @note Si l'index ne designe pas un ojet de type Groupe_selection, alors c'est l'objet parent qui est renvoyé.
      */
    Groupe_selection *nodeFromIndex(const QModelIndex &index) const;

    /*!
      @fn void beginReset();
      @brief Accesseur indiquand que l'arbre commance à etre modifié.
      */
    void beginReset();

    /*!
      @fn void endReset();
      @brief Accesseur indiquand que la modification de l'arbre est terminé.
      */
    void endReset();

signals:

public slots:
    /*!
      @fn void switchEtat(Groupe_selection *zones = NULL);
      @param Groupe_selection *zones : racine de l'arbre don l'etat de ses éléments sera inversé. Si c'est null alors l'inversion s'applique sur tout l'arbre.
      @brief Evenement, inverse l'etat de chaque zones designés.
      */
    void switchEtat(Groupe_selection *zones = NULL);
private:
    Groupe_selection *rootNode;
    MainWindow *mainwindow;

    /*!
        @fn QModelIndex index(int row, int column, const QModelIndex &parent) const;
        @param int row : ligne de l'item
        @param int column : colone de l'item
        @param const QModelIndex &parent : parent de l'item
        @brief Retourne l'index de l'item du model definit par la ligne, la colone et le parent.
    */
    QModelIndex index(int row, int column, const QModelIndex &parent) const;

    /*!
        @fn int rowCount(const QModelIndex &parent) const;
        @param const QModelIndex &parent : parent de l'item
        @return int : nombre d'élements.
        @brief Retourne le nombre de lignes contenus par l'index.
        @note Dans notre cas, il n'y a qu'une unique ligne pour l'affichage du label.
    */
    int rowCount(const QModelIndex &parent) const;

    /*!
        @fn int columnCount(const QModelIndex &parent) const;
        @param const QModelIndex &parent : parent de l'item
        @return int : nombre d'élements.
        @brief Retourne le nombre de colone contenu par l'index.
        @note Si l'index n'est pas un composit, la fonction renvoie zéro.
    */
    int columnCount(const QModelIndex &parent) const;

    /*!
        @fn QModelIndex parent(const QModelIndex &child) const;
        @param const QModelIndex &child : Item s'électionné.
        @return QModelIndex : Parent de l'item.
        @brief Retourne un index sur l'item parent ce celui passé en paramétre.
        @note Si l'index n'est pas un composit, la fonction renvoie zéro.
    */
    QModelIndex parent(const QModelIndex &child) const;

    /*!
        @fn QVariant data(const QModelIndex &index, int role) const;
        @param const QModelIndex &index : Item s'électionné.
        @param int role : Definit l'information demendé.
        @return QVariant : Change en fonction du type d'inforation demandé.
        @brief  Retourne la valeur designé par le role.
     */
    QVariant data(const QModelIndex &index, int role) const;

    /*!
        @fn Qt::ItemFlags flags (const QModelIndex  &index ) const;
        @param const QModelIndex &index : Item s'électionné.
        @return Qt::ItemFlags : parametres de l'item.
        @brief  Retourne le parametre associé a l'index.
     */
    Qt::ItemFlags flags (const QModelIndex  &index ) const;

    /*!
        @fn bool setData (const QModelIndex &index, const QVariant &value, int role);
        @param const QModelIndex &index : Item s'électionné.
        @param const QVariant &value :  valeur.
        @param int role :  designe ce qu'il fait initialiser.
        @return bool : False en cas d'échque, true sinon.
        @brief Fixe une valeur du model en fonction du role.
     */
    bool setData (const QModelIndex &index, const QVariant &value, int role);

};

#endif // MYTREEZONEMODEL_H
